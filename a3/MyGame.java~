package a3;
/*
import myGameEngine.Networking.ProtocolClient;
import myGameEngine.Networking.GhostAvatar;
import myGameEngine.Networking.NetworkingServer;
import myGameEngine.Networking.GameServerUDP;

import myGameEngine.Actions.MoveForwardAction;
import myGameEngine.Actions.MoveBackwardAction;
import myGameEngine.Actions.MoveLeftAction;
import myGameEngine.Actions.MoveRightAction;
import myGameEngine.Actions.PitchUpAction;
import myGameEngine.Actions.PitchDownAction;
import myGameEngine.Actions.YawLeftAction;
import myGameEngine.Actions.YawRightAction;
*/
import myGameEngine.Networking.*;
import myGameEngine.Actions.*;

import java.awt.*;
import java.awt.geom.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineFactory;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import javax.script.Invocable;


import java.util.UUID;
import java.util.Vector;
import java.util.List;
import java.util.Iterator;
import java.net.UnknownHostException;
import java.net.InetAddress;
import net.java.games.input.Event;

import ray.rage.*;
import ray.rage.asset.material.*;
import ray.rage.asset.texture.*;
import ray.rage.game.*;
import ray.rage.rendersystem.*;
import ray.rage.rendersystem.Renderable.*;
import ray.rage.rendersystem.states.*;
import ray.rage.rendersystem.states.RenderState.Type;
import ray.rage.rendersystem.shader.*;
import ray.rage.rendersystem.gl4.GL4RenderSystem;
import ray.rage.scene.*;
import ray.rage.scene.Camera.Frustum.*;
import ray.rage.scene.controllers.*;
import ray.rage.asset.texture.*;
import ray.rage.util.*;


import ray.networking.IGameConnection.ProtocolType;

import ray.input.*;
import ray.input.action.*;
import ray.input.action.AbstractInputAction;


import net.java.games.input.Controller;
import net.java.games.input.ControllerEnvironment;
import net.java.games.input.Version;
import net.java.games.input.Component;

import ray.rml.*;

import static ray.rage.scene.SkeletalEntity.EndType.*;

public class MyGame extends VariableFrameRateGame {

	// to minimize variable allocation in update()
	GL4RenderSystem rs;
	float elapsTime = 0.0f;
	String elapsTimeStr, counterStr, dispStr;
	int elapsTimeSec, counter = 0;
	
	private SceneManager sm;
	//private SceneNode avatarN;
	//private SceneNode dolphinChildN;
	private SceneNode avatarN;
	private SceneNode avatarChildN;
	private SceneNode cameraN;
	private SceneNode tessN;
	private SceneNode treeN;
	
	private Tessellation tessE;
	
	private Camera camera;
	
	private InputManager im = new GenericInputManager();
	
	private String serverAddress;
	private int serverPort;
	private ProtocolType serverProtocol;
	private ProtocolClient protClient;
	private boolean isClientConnected;
	private Vector<UUID> gameObjectsToRemove;
	
	private static final String HEIGHTMAP_NAME = "heightMap2.PNG";
	private static final String GROUND_TEXTURE = "greenHills.PNG";
	
	private static final String SKYBOX_NAME = "SkyBox";
	private boolean skyBoxVisible = true;
	
	private ScriptEngine jsEngine;
	private Invocable invocableEngine;
	private File scriptFile1;
	private File worldObjectFile;
	private long fileLastModifiedTime;
	private long worldObjectsFileLastModifiedTime;
	
	private RotationController rc;

    public MyGame(String serverAddr, int sPort) {
        super();
		serverAddress = serverAddr;
		serverPort = sPort;
		serverProtocol = ProtocolType.UDP; //TCP
		/*System.out.println("press T to render triangles");
		System.out.println("press L to render lines");
		System.out.println("press P to render points");
		System.out.println("press C to increment counter");
		*/
		ScriptEngineManager factory = new ScriptEngineManager();
		jsEngine = factory.getEngineByName("js");
    }

    public static void main(String[] args) {
        MyGame game = new MyGame(args[0], Integer.parseInt(args[1])); //, args[2]);
		
		ScriptEngineManager factory = new ScriptEngineManager();
		String scriptFileName = "hello.js";
		
		//get a list of the script engines on this platform
		List<ScriptEngineFactory> list = factory.getEngineFactories();
		
		System.out.println("Script Engine Factories found:");
		for(ScriptEngineFactory f:list){
		
			System.out.println(" Name = " + f.getEngineName()
				+ " language = " + f.getLanguageName()
				+ " extensions = " + f.getExtensions());
		}
		
		//get the JavaScript engine
		ScriptEngine jsEngine = factory.getEngineByName("js");
		
		//run the script
		game.executeScript(jsEngine, scriptFileName);
		
        try {
            game.startup();
            game.run();
        } catch (Exception e) {
            e.printStackTrace(System.err);
        } finally {
            game.shutdown();
            game.exit();
        }
    }
	
	private void executeScript(ScriptEngine engine, String scriptFileName){
	
		try{
			FileReader fileReader = new FileReader(scriptFileName);
			engine.eval(fileReader); //execute the script statements in the file
			fileReader.close();
		}
		catch(FileNotFoundException e1){
			System.out.println(scriptFileName + " not found " + e1);
		}
		catch(IOException e2){
			System.out.println("IO problem with " + scriptFileName + e2);
		}
		catch(ScriptException e3){
			System.out.println("ScriptException in " + scriptFileName + e3);
		}
		catch(NullPointerException e4){
			System.out.println("Null ptr exception in " + scriptFileName + e4);
		}
	}
	
	private void runScript(File script){
		
		try{
			FileReader fileReader = new FileReader(script);
			jsEngine.eval(fileReader); //execute the script statements in the file
			fileReader.close();
		}
		catch(FileNotFoundException e1){
			System.out.println(script + " not found " + e1);
		}
		catch(IOException e2){
			System.out.println("IO problem with " + script + e2);
		}
		catch(ScriptException e3){
			System.out.println("ScriptException in " + script + e3);
		}
		catch(NullPointerException e4){
			System.out.println("Null ptr exception in " + script + e4);
		}
	}
	
	
	public void setIsConnected(boolean connected){
			isClientConnected = connected;
	}
	
	private void setupNetworking(){
	
		gameObjectsToRemove = new Vector<UUID>();
		isClientConnected = false;
		
		try{
			System.out.println("Attempting to get ProtocolClient"); //added for debugging
			protClient = new ProtocolClient(InetAddress.getByName(serverAddress), serverPort, serverProtocol, this);
		}
		catch(UnknownHostException e) {
			e.printStackTrace();
		}
		catch(IOException e){
			e.printStackTrace();
		}
		
		if(protClient == null)
			System.out.println("missing protocol host");
		else
			protClient.sendJoinMessage();
		
		
		setupInputs();
	}
	
	protected void setupInputs(){
	
		String gpName = im.getFirstGamepadName();
		String kbName = im.getKeyboardName();
		
		Action moveForward = new MoveForwardAction(avatarN, protClient, jsEngine, this);
		Action moveBackward = new MoveBackwardAction(avatarN, protClient, jsEngine, this);
		Action moveLeft = new MoveLeftAction(avatarN, protClient, jsEngine, this);
		Action moveRight = new MoveRightAction(avatarN, protClient, jsEngine, this);
		Action pitchUp = new PitchUpAction(avatarN, protClient, jsEngine);
		Action pitchDown = new PitchDownAction(avatarN, protClient, jsEngine);
		Action yawLeft = new YawLeftAction(avatarN, protClient, jsEngine);
		Action yawRight = new YawRightAction(avatarN, protClient, jsEngine);
		Action quit = new SendCloseConnectionPacketAction();//protClient, isClientConnected);
		
		//keyboard associations
		im.associateAction(kbName,
			net.java.games.input.Component.Identifier.Key.P,
			quit, InputManager.INPUT_ACTION_TYPE.REPEAT_WHILE_DOWN);
		im.associateAction(kbName,
			net.java.games.input.Component.Identifier.Key.W,
			moveForward, InputManager.INPUT_ACTION_TYPE.REPEAT_WHILE_DOWN);
		im.associateAction(kbName,
			net.java.games.input.Component.Identifier.Key.S,
			moveBackward, InputManager.INPUT_ACTION_TYPE.REPEAT_WHILE_DOWN);
		im.associateAction(kbName,
			net.java.games.input.Component.Identifier.Key.A,
			moveLeft, InputManager.INPUT_ACTION_TYPE.REPEAT_WHILE_DOWN);
		im.associateAction(kbName,
			net.java.games.input.Component.Identifier.Key.D,
			moveRight, InputManager.INPUT_ACTION_TYPE.REPEAT_WHILE_DOWN);
		im.associateAction(kbName,
			net.java.games.input.Component.Identifier.Key.UP,
			pitchUp, InputManager.INPUT_ACTION_TYPE.REPEAT_WHILE_DOWN);
		im.associateAction(kbName,
			net.java.games.input.Component.Identifier.Key.DOWN,
			pitchDown, InputManager.INPUT_ACTION_TYPE.REPEAT_WHILE_DOWN);
		im.associateAction(kbName,
			net.java.games.input.Component.Identifier.Key.LEFT,
			yawLeft, InputManager.INPUT_ACTION_TYPE.REPEAT_WHILE_DOWN);
		im.associateAction(kbName,
			net.java.games.input.Component.Identifier.Key.RIGHT,
			yawRight, InputManager.INPUT_ACTION_TYPE.REPEAT_WHILE_DOWN);
		
		
			
			
		/*
		//Gamepad associations
		im.associateAction(gpName,
			net.java.games.input.Component.Identifier.Button._1,
			moveForward, InputManager.INPUT_ACTION_TYPE.REPEAT_WHILE_DOWN);
		*/
	}
	
	@Override
	protected void setupWindow(RenderSystem rs, GraphicsEnvironment ge) {
		rs.createRenderWindow(new DisplayMode(1000, 700, 24, 60), false);
	}

    @Override
    protected void setupCameras(SceneManager sm, RenderWindow rw) {
        SceneNode rootNode = sm.getRootSceneNode();
        camera = sm.createCamera("MainCamera", Projection.PERSPECTIVE);
        rw.getViewport(0).setCamera(camera);
		
		camera.setRt((Vector3f)Vector3f.createFrom(1.0f, 0.0f, 0.0f));
		camera.setUp((Vector3f)Vector3f.createFrom(0.0f, 1.0f, 0.0f));
		camera.setFd((Vector3f)Vector3f.createFrom(0.0f, 0.0f, -1.0f));
		
		camera.setPo((Vector3f)Vector3f.createFrom(0.0f, 0.0f, 0.0f));

        SceneNode cameraNode = rootNode.createChildSceneNode(camera.getName() + "Node");
        cameraNode.attachObject(camera);
		camera.setMode('n');
    }
	
	protected void setupAvatar(Engine eng, SceneManager sm) throws IOException {
		
		SkeletalEntity avatarE = sm.createSkeletalEntity("avatar", "MrPolygonSkelModel.rkm","MrPolygonSkel.rks");
		Texture tex = sm.getTextureManager().getAssetByPath("MrPolygonTexture.png");
		TextureState tstate = (TextureState) sm.getRenderSystem().createRenderState(RenderState.Type.TEXTURE);
		tstate.setTexture(tex);
		avatarE.setRenderState(tstate);
		
		//attach the entity to a scene node
		avatarN = sm.getRootSceneNode().createChildSceneNode("avatarN");
		avatarN.scale(0.005f, 0.005f, 0.005f);
		avatarN.moveBackward(2.0f);
		avatarN.attachObject(avatarE);
		
		//attach camera to avatar
		avatarChildN = avatarN.createChildSceneNode(avatarE.getName() + "Node");
		avatarChildN.moveBackward(7.0f);
		avatarChildN.moveUp(2.0f);
		avatarChildN.attachObject(camera);
		
		//load animations
		avatarE.loadAnimation("walkAnimation","MrPolygonWalk.rka");
	}
	
	public void doTheWalk(){
		SkeletalEntity avatarE = (SkeletalEntity) sm.getEntity("avatar");
		
		avatarE.stopAnimation();
		avatarE.playAnimation("walkAnimation", 1.0f, LOOP, 1);
	}
	
    @Override
    protected void setupScene(Engine eng, SceneManager sm) throws IOException {
		this.sm = sm;
		
		TextureManager tm = eng.getTextureManager();
		RenderSystem rs = sm.getRenderSystem();
		
	//*******Set up sky box
		setupSkybox(eng);
	
	//********Set up avatar
		setupAvatar(eng, sm);
	
	/*
	Added method for player avatar
	//*******add dolphin to scene, currently this is our "avatar"
        Entity dolphinE = sm.createEntity("myDolphin", "dolphinHighPoly.obj");
	    dolphinE.setPrimitive(Primitive.TRIANGLES);

        avatarN = sm.getRootSceneNode().createChildSceneNode(dolphinE.getName() + "Node");
        avatarN.moveBackward(2.0f);
        avatarN.attachObject(dolphinE);
		
		dolphinChildN = avatarN.createChildSceneNode("DolphinChild");
		dolphinChildN.moveBackward(0.25f);
		dolphinChildN.moveUp(0.5f);
		dolphinChildN.attachObject(camera);
		
	*/
		
	//******add tree
	
	Entity treeE = sm.createEntity("myTree", "lowPolyPineTreeblend.obj");
	//Entity treeE = sm.createEntity("myTree", "cube.obj");
	treeE.setPrimitive(Primitive.TRIANGLES);
	
	treeN = sm.getRootSceneNode().createChildSceneNode("treeNode");
	treeN.scale(.5f, .5f, .5f);
	treeN.attachObject(treeE);
	
	Texture treeTex = tm.getAssetByPath("low_poly_pine_tree_skin.png");
	TextureState treeTexState = (TextureState) rs.createRenderState(RenderState.Type.TEXTURE);
	treeTexState.setTexture(treeTex);
	treeE.setRenderState(treeTexState);
	

	//******Lighting
        sm.getAmbientLight().setIntensity(new Color(.1f, .1f, .1f));
		
		Light plight = sm.createLight("testLamp1", Light.Type.POINT);
		plight.setAmbient(new Color(.3f, .3f, .3f));
        plight.setDiffuse(new Color(.7f, .7f, .7f));
		plight.setSpecular(new Color(1.0f, 1.0f, 1.0f));
        plight.setRange(5f);
		
		SceneNode plightNode = sm.getRootSceneNode().createChildSceneNode("plightNode");
        plightNode.attachObject(plight);
		
		//prepare the script engine
		ScriptEngineManager factory = new ScriptEngineManager();
		List<ScriptEngineFactory> list = factory.getEngineFactories();
		//ScriptEngine jsEngine = factory.getEngineByName("js");
		
		//use spin speed setting from the first script to initialize dolphin rotation
		scriptFile1 = new File("initParams.js");
		this.runScript(scriptFile1);
		fileLastModifiedTime = scriptFile1.lastModified();
		
		
		
		worldObjectFile = new File("worldObjects.js");
		this.runScript(worldObjectFile);
		worldObjectsFileLastModifiedTime = worldObjectFile.lastModified();

		invocableEngine = (Invocable) jsEngine;
		
		try{
			invocableEngine.invokeFunction("updateWorldObjects", sm);
		}
		catch(ScriptException e1){
			System.out.println("ScriptException in " + worldObjectFile + e1);
		}
		catch(NoSuchMethodException e2){
			System.out.println("No such method in " + worldObjectFile + e2);
		}
		catch(NullPointerException e3){
			System.out.println("Null ptr exception reading " + worldObjectFile + e3);
		}
		
		




        //rc = new RotationController(Vector3f.createUnitVectorY(),
								//((Double)(jsEngine.get("spinSpeed"))).floatValue());
        //rc.addNode(avatarN);
        //sm.addController(rc);
		
		setupNetworking();
		//setupInputs();
		setUpTerrain();
		
    }
	
	protected void setupSkybox(Engine eng) throws IOException{
		
		Configuration conf = eng.getConfiguration();
		TextureManager tm = getEngine().getTextureManager();
		tm.setBaseDirectoryPath(conf.valueOf("assets.skyboxes.mypath"));
		Texture front = tm.getAssetByPath("front.jpg");
		Texture back = tm.getAssetByPath("back.jpg");
		Texture left = tm.getAssetByPath("left.jpg");
		Texture right = tm.getAssetByPath("right.jpg");
		Texture top = tm.getAssetByPath("top.jpg");
		Texture bottom = tm.getAssetByPath("bottom.jpg");
		tm.setBaseDirectoryPath(conf.valueOf("assets.textures.path"));
		
		
		AffineTransform xform = new AffineTransform();
		xform.translate(0, front.getImage().getHeight());
		xform.scale(1d, -1d);
		
		front.transform(xform);
		back.transform(xform);
		left.transform(xform);
		right.transform(xform);
		top.transform(xform);
		bottom.transform(xform);
		
		SkyBox sb = sm.createSkyBox(SKYBOX_NAME);
		sb.setTexture(front, SkyBox.Face.FRONT);
		sb.setTexture(back, SkyBox.Face.BACK);
		sb.setTexture(left, SkyBox.Face.LEFT);
		sb.setTexture(right, SkyBox.Face.RIGHT);
		sb.setTexture(top, SkyBox.Face.TOP);
		sb.setTexture(bottom, SkyBox.Face.BOTTOM);
		sm.setActiveSkyBox(sb);
	}
	
	protected void setUpTerrain(){
	
		tessE = sm.createTessellation("tessE",6);
		
		//subdivisions per patch min=0, try up to 32
		tessE.setSubdivisions(0f);
		tessE.setQuality(9);
		
		tessN = sm.getRootSceneNode().createChildSceneNode("TessN");
		tessN.attachObject(tessE);
		
		//to move it, note that x and z must BOTH be positive OR negative
		//tessN.translate(Vector3f.createFrom(-6.2f, -2.2f, 2.7f));
		//tessN.yaw(Degreef.createFrom(37.2f));
		
		tessN.scale(1000, 10000, 1000);
		tessE.setHeightMap(this.getEngine(), HEIGHTMAP_NAME);
		tessE.setTexture(this.getEngine(), GROUND_TEXTURE);
		//tessE.setNormalMap(...);
		
		/*
		RenderSystem rs = sm.getRenderSystem();
		ZBufferState zstate = (ZBufferState) rs.createRenderState(RenderState.Type.ZBUFFER);
		zstate.setTestEnabled(true);
		tessE.setRenderState(zstate);
		*/
		
	}
	
	public void updateVerticalPosition(){
		
		//Figure out Avatar's position relative to plane
		Vector3 worldAvatarPosition = avatarN.getWorldPosition();
		Vector3 localAvatarPosition = avatarN.getLocalPosition();
		
		//use avatar World coordinates to get coordinates for heightMap
		Vector3 newAvatarPosition = Vector3f.createFrom(
		
			//keep the x coordinates
			localAvatarPosition.x(),
		
			//the Y coordinate is the varying heightMap
			tessE.getWorldHeight(worldAvatarPosition.x(), worldAvatarPosition.z()),
		
			//keep the z coordinate
			localAvatarPosition.z()
		);
		
		//use avatar Local coordinates to set position, including heightMap
		avatarN.setLocalPosition(newAvatarPosition);
	}
	
	public void updateVerticalPosition(SceneNode node){
		
		Vector3 worldNodePosition = node.getWorldPosition();
		Vector3 localNodePosition = node.getLocalPosition();
		
		//use avatar World coordinates to get coordinates for heightMap
		Vector3 newNodePosition = Vector3f.createFrom(
		
			//keep the x coordinates
			localNodePosition.x(),
		
			//the Y coordinate is the varying heightMap
			tessE.getWorldHeight(worldNodePosition.x(), worldNodePosition.z()) + 0.25f,
		
			//keep the z coordinate
			localNodePosition.z()
		);
		
		//use avatar Local coordinates to set position, including heightMap
		node.setLocalPosition(newNodePosition);
	}

    @Override
    protected void update(Engine engine) {
		// build and set HUD
		rs = (GL4RenderSystem) engine.getRenderSystem();
		elapsTime += engine.getElapsedTimeMillis();
		elapsTimeSec = Math.round(elapsTime/1000.0f);
		elapsTimeStr = Integer.toString(elapsTimeSec);
		counterStr = Integer.toString(counter);
		dispStr = "Time = " + elapsTimeStr + "   Keyboard hits = " + counterStr;
		rs.setHUD(dispStr, 15, 15);
		
		//run script again in update() to demonstrate dynamic modification
		long modTime = scriptFile1.lastModified();
		if(modTime > fileLastModifiedTime){
			fileLastModifiedTime = modTime;
			this.runScript(scriptFile1);
			rc.setSpeed(((Double)(jsEngine.get("spinSpeed"))).floatValue());
		}
		
		long wmodTime= worldObjectFile.lastModified();
		if( wmodTime > worldObjectsFileLastModifiedTime){
			worldObjectsFileLastModifiedTime = wmodTime;
			this.runScript(worldObjectFile);
			
			try{
				invocableEngine.invokeFunction("updateWorldObjects", sm);
			}
			catch(ScriptException e1){
				System.out.println("ScriptException in " + worldObjectFile + e1);
			}
			catch(NoSuchMethodException e2){
				System.out.println("No such method in " + worldObjectFile + e2);
			}
			catch(NullPointerException e3){
				System.out.println("Null ptr exception reading " + worldObjectFile + e3);
			}
			
		}
		
		//System.out.println(isClientConnected);
		processNetworking(elapsTime);
		im.update(elapsTime);
		
		//update animations
		SkeletalEntity avatarE = (SkeletalEntity) sm.getEntity("avatar");
		avatarE.update();
		
	}
	
	protected void processNetworking(float elapsTime){
		
		if(protClient != null)
			protClient.processPackets();
		
		Iterator<UUID> it = gameObjectsToRemove.iterator();
		while(it.hasNext())
			sm.destroySceneNode(it.next().toString());
		
		gameObjectsToRemove.clear();
	}
	
	public Vector3 getPlayerPosition(){
		return avatarN.getWorldPosition();
	}
	
	public void addGhostAvatarToGameWorld(GhostAvatar avatar) throws IOException{
		if(avatar != null){
			System.out.println("Creating ghost avatar");
			Entity ghostE = sm.createEntity("ghost", "sphere.obj");
			ghostE.setPrimitive(Primitive.TRIANGLES);
			SceneNode ghostN = sm.getRootSceneNode().createChildSceneNode(avatar.getID().toString());
			ghostN.attachObject(ghostE);
			//ghostN.setLocalPosition(0, 0 , -4); //these hardcoded numbers need some enumeration later
			avatar.setNode(ghostN);
			avatar.setEntity(ghostE);
			//avatar.setPosition(); sample says this could be redundent. Leaving it commented out for now
		}
	}
	
	public void addGhostNPCtoGameWorld(GhostNPC npc){
		
	}
	
	public void removeGhostAvatarFromGameWorld(GhostAvatar avatar){
		if(avatar != null)
			gameObjectsToRemove.add(avatar.getID());
	}
	
/*
    @Override
    public void keyPressed(KeyEvent e) {
        Entity dolphin = getEngine().getSceneManager().getEntity("myDolphin");
        switch (e.getKeyCode()) {
            case KeyEvent.VK_L:
                dolphin.setPrimitive(Primitive.LINES);
                break;
            case KeyEvent.VK_T:
                dolphin.setPrimitive(Primitive.TRIANGLES);
                break;
            case KeyEvent.VK_P:
                dolphin.setPrimitive(Primitive.POINTS);
                break;
			case KeyEvent.VK_C:
				counter++;
				break;
        }
        super.keyPressed(e);
    }
*/	
	
	private class SendCloseConnectionPacketAction extends AbstractInputAction{
	
	
		public void performAction(float time, Event e){
			
			if(protClient != null && isClientConnected == true){
				System.out.println("Bye");	
				protClient.sendByeMessage();
			}
			
			exit();
		}
	}
	
}
